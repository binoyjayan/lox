
/** Metaprogramming for generating expressions and statements
 * 
 */
use std::io;
use std::fs;
use std::env;
use std::process;
use std::io::Write;

fn main() -> io::Result<()> {
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        println!("Usage: gen-ast <outdir>");
        process::exit(64);
    }

    let outdir = args.get(1).unwrap();

    // Production
    // Base-Class: Tokens
    define_ast(outdir, &"Expr".to_string(),
        &vec!["crate::error::*", "crate::token::*", "crate::object::*"],
        &vec![
            "Binary       : Box<Expr> left, Token operator, Box<Expr> right".into(),
            "Grouping     : Box<Expr> expression".into(),
            "Literal      : Option<Object> value".into(),
            "Unary        : Token operator, Box<Expr> right".into(),
        ]
    )?;

    define_ast(outdir, &"Stmt".to_string(),
        &vec!["crate::error::*", "crate::expr::Expr"],
        &vec![
            "Expression   : Box<Expr> expression".into(),
            "Print        : Box<Expr> expression".into(),
        ]
    )?;

    Ok(())
}

#[derive (Debug)]
struct AstType {
    base_class_name: String,
    class_name: String,
    fields: Vec<String>,
}

fn define_ast(outdir: &String, base_name: &String, imports: &[&str], productions: &[String]) -> io::Result<()> {
    let mut types = Vec::new();

    for production in productions {
        let (base_class_name, tokens_str) = production.split_once(":").unwrap();
        let class_name = format!("{}{}", base_class_name.trim(), base_name.trim());
        let tokens_iter = tokens_str.split(",");
        let mut fields: Vec<String> = Vec::new();
        for token in tokens_iter {
            let (token_type, token_name) = token.trim().split_once(" ").unwrap();
            fields.push(format!("{}: {}", token_name, token_type));
        }
        types.push(AstType {
            base_class_name: base_class_name.trim().to_string(),
            class_name,
            fields,
        });
    }

    let path = format!("{outdir}/{}.rs", base_name.to_lowercase());
    let mut file = fs::File::create(path)?;

    writeln!(file, "// This is an autogenerated file. Do not edit manually. Use gen-ast package.")?;
    writeln!(file, "// Use gen-ast package to generate this file.\n")?;

    for i in imports {
        writeln!(file, "use {};", i)?;
    }

    // Define enum of expression types
    writeln!(file, "\npub enum {base_name} {{")?;
    for ty in &types {
        writeln!(file, "    {}({}),", ty.base_class_name, ty.class_name)?;
    }
    writeln!(file, "}}\n")?;

    // Implement enum expression
    writeln!(file, "impl {base_name} {{")?;
    writeln!(file, "    pub fn accept<T>(&self, visitor: &dyn {}Visitor<T>) -> Result<T, LoxErr> {{", base_name)?;
    writeln!(file, "        match self {{")?;
    for ty in &types {
        writeln!(file, "            {}::{}(exp) => exp.accept(visitor),", base_name, ty.base_class_name)?;
    }
    writeln!(file, "        }}")?;
    writeln!(file, "    }}\n")?;
    writeln!(file, "}}\n")?;

    // Define concrete expressions
    for ty in &types {
        writeln!(file, "pub struct {} {{", ty.class_name)?;
        for field in &ty.fields {
            writeln!(file, "    pub {},", field)?;
        }
        writeln!(file, "}}\n")?;
    }

    // Define visitors traits for expressions
    writeln!(file, "pub trait {}Visitor<T> {{", base_name)?;
    for ty in &types {
        writeln!(file, "    fn visit_{}_{}(&self, {}: &{}) -> Result<T, LoxErr>;",
            ty.base_class_name.to_lowercase(),
            base_name.to_lowercase(),
            base_name.to_lowercase(),
            ty.class_name
        )?;
    }
    writeln!(file, "}}\n")?;

    // Implement accept() method for the concrete expressions
    for ty in &types {
        writeln!(file, "impl {} {{", ty.class_name)?;
        writeln!(file, "    pub fn accept<T>(&self, visitor: &dyn {}Visitor<T>) -> Result<T, LoxErr> {{", base_name)?;
        writeln!(file, "        visitor.visit_{}_{}(self)",
            ty.base_class_name.to_lowercase(),
            base_name.to_lowercase()
        )?;
        writeln!(file, "    }}")?;
        writeln!(file, "}}\n")?;
    }
    Ok(())
}


